# Bar plot in Python 


import matplotlib.pyplot as plt
Names = ["Aqib","Razi","Amir","Hassan","Njf"]
color = ["red","green","yellow","blue","pink"]
Salary = [23,45,67,89,34]
plt.xlabel("Names of Students",fontsize = 10)
plt.ylabel("Salaries",fontsize = 10)
plt.title("Bar Graph")
plt.bar(Names,Salary,color = color) #,edgecolor = "black")
plt.show()
# in bar chart color  = color

import pandas as pd 
import matplotlib.pyplot as plt 

df = pd.read_excel(r"D:\all data\excel files\Apocolypse Food Prep - Conditional Formatting Tutorial.xlsx")
df
plt.bar(df["Customer"],df["Units Sold"])
plt.xlabel("Customer")
plt.ylabel("Units Sold")
plt.title("Units Sold by Customer")
plt.xticks(rotation=90)
plt.show()


import pandas as pd 
import matplotlib.pyplot as plt 

# Read the Excel file
df = pd.read_excel(r"D:\all data\excel files\Apocolypse Food Prep - Conditional Formatting Tutorial.xlsx")

# Accessing columns should be separated by a comma inside the square brackets
# plt.bar() expects two arguments: x and height. You should pass x as the categories and height as the corresponding values.
plt.bar(df["Customer"], df["Units Sold"])

plt.xlabel("Customer")
plt.ylabel("Units Sold")
plt.title("Units Sold by Customer")

plt.xticks(rotation=90)  # Rotate x-axis labels for better readability if needed

plt.show()


This part adds text on the plot.
i is where on the x-axis the text should be placed. It's like saying, "Put the text at position i."
value is where on the y-axis the text should be placed. It's like saying, "Put the text at height value."
str(value) is what text should be displayed. We convert value to a string because plt.text() expects a string.
va="bottom" means that the bottom of the text will be aligned with the value position.
It's like saying, "Put the text so that its bottom is at value."
ha="center" means that the text will be centered horizontally at the i position.
It's like saying, "Center the text horizontally at position i."

import pandas as pd 
import matplotlib.pyplot as plt 

# Read the Excel file
df = pd.read_excel(r"D:\all data\excel files\Apocolypse Food Prep - Conditional Formatting Tutorial.xlsx")
color = ["red","green","pink","gray"]
# Calculate the count of units sold for each customer
unit_counts = df.groupby("Customer")["Units Sold"].sum()

# Create the bar plot
plt.bar(unit_counts.index, unit_counts.values,color = color)

# Add count labels on top of each bar
for i, value in enumerate(unit_counts.values):
    plt.text(i, value,str(value),va = "bottom",ha = "center")

plt.xlabel("Customer")
plt.ylabel("Total Units Sold")
plt.title("Total Units Sold by Customer")
plt.grid(True)

plt.xticks(rotation=90)  # Rotate x-axis labels for better readability if needed

plt.show()
# for i in enumerate(Units_sold.values):
#   plt.txt(i,value,str(value),va = "bottom",ha = "center")

import matplotlib.pyplot as plt
Names = ["Aqib","Razi","Amir","Hassan","Njf"]
color = ["red","green","yellow","blue","pink"]
Salary = [23,11,67,9,84]
plt.xlabel("Names of Student ")
plt.ylabel("Salary of Students")
plt.title("Line Graph")
plt.plot(Names,Salary,marker = "*")
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Define data
Names = ["Aqib", "Razi", "Amir", "Hassan", "Njf"]
Salary = [23, 45, 11, 89, 99]
age  = [89,33,66,34,45]
# Set colors for each data point
colors = ["red", "green", "yellow", "blue", "pink"]

# Plotting
plt.plot(Names, Salary, marker='*', ls="--",color = "black",label = "week1",alpha = 0.5)
plt.plot(Names, age, marker='D', ls="-",color = "green",label = "week2")# Plot the line graph
plt.xlabel("Names")  # Label for x-axis
plt.ylabel("Salary")  # Label for y-axis
plt.title("Salary Distribution")  # Title of the plot
for i, value in enumerate(Salary):
    plt.text(i, value, str(value), ha='center', va='bottom')

# Add data labels for week2
for i, value in enumerate(age):
    plt.text(i, value, str(value), ha='center', va='bottom')
plt.xticks(Names)  # Set x-tick labels to Names
plt.yticks(Salary)  # Set y-tick labels to Salary
plt.legend(loc = "upper center")
plt.grid(True)  # Add gridlines to the plot
plt.show()  # Display the plot


# scatter plot in python 

import numpy as np
import matplotlib.pyplot as plt
x = np.random.randint(10,1000,110)
y = np.random.randint(1,2000,110)
color = np.random.randint(1,1000,110)
plt.scatter(x,y,marker = "*",cmap = "viridis",c = color,facecolor  = "black")
plt.colorbar()
plt.figure(facecolor='black')
plt.show()
# in scatter graph .... parameter for the color is c = color not color = color that was ised in bar charts or line charts

import numpy as np
import matplotlib.pyplot as plt

# Generate random data
x = np.random.randint(10, 1000, 30)
y = np.random.randint(1, 200, 30)
color = np.random.randint(1, 1000, 30)

# Create scatter plot
# plt.figure(facecolor='black')  # Set the background color of the figure to black
plt.scatter(x, y, marker="*", cmap="viridis", c=color)

# Add colorbar
plt.colorbar()

# Display the plot
plt.show()


import numpy as np
import matplotlib.pyplot as plt

# Generate random data
x = np.random.randint(10, 1000, 30)
y = np.random.randint(1, 200, 30)
color = np.random.randint(1, 1000, 30)

# Create scatter plot with black background
plt.scatter(x, y, marker="*", cmap="hot", c=color, facecolor='black')

# Add colorbar
plt.colorbar()

# Display the plot
plt.show()


import numpy as np
import matplotlib.pyplot as plt

# Generate random data
x = np.random.randint(10, 1000, 50)
y = np.random.randint(1, 200, 50)
color = np.random.randint(1, 1000, 50)
plt.figure(figsize=(1000, 50))
# Create scatter plot
fig, ax = plt.subplots()
scatter = ax.scatter(x, y, marker="*", cmap="hot", c=color)

# Set the background color of the scatter plot area to black
ax.set_facecolor('black')

# Add colorbar
# plt.colorbar(scatter)

# Display the plot
plt.show()


import numpy as np
import matplotlib.pyplot as plt

# Generate random data
x = np.random.randint(10, 1000, 50)
y = np.random.randint(1, 200, 50)
color = np.random.randint(1, 1000, 50)

# Create scatter plot
fig, ax = plt.subplots(figsize=(13, 8))  # Adjust the width and height as needed
scatter = ax.scatter(x, y, marker="*", cmap="hot", c=color)

# Set the background color of the scatter plot area to black
ax.set_facecolor('black')

# Display the plot
plt.show()


viridis: A perceptually uniform colormap that is often recommended for sequential data.
plasma: A colormap with vibrant colors and a uniform luminance profile.
inferno: A colormap with a dark background and vibrant colors.
magma: A colormap with dark backgrounds and vibrant colors, similar to inferno but with higher contrast.
cividis: A colormap designed to be perceived by viewers with color vision deficiencies.
coolwarm

# pie charts in matplotlib 

import matplotlib.pyplot as plt 
import pandas as pd 
import numpy as np 
Data = ["Samsung","Iphone","Oppo","Vivo","Infinix"]
x = [92,96,85,78,67]
ex = [0,0.1,0,0.1,0.1]
color = ["indigo","green","yellow","red","gray"]
plt.pie(x,labels  = Data,colors = color,explode = ex,autopct = "%.2f",startangle = 90);

# Boxplot in matplotlib

import matplotlib.pyplot as plt
x = [1,3,4,7,12,2,8,9,24]
x1 = [23,32,43,54,65,99,44,23]

plot_values = [x,x1]
plt.boxplot(plot_values)
plt.show()

# Histogram Plot 

import matplotlib.pyplot as plt
x = [1,3,4,7,12,2,8,9,24]
plt.hist(x,bins = 10,edgecolor = "black",color = "green")
plt.show()

import pandas as pd 
import matplotlib.pyplot as plt 
df= pd.read_excel(r"C:\Users\Asif computer\Downloads\ESD.xlsx")
df
plt.hist(df["Age"],bins = 10,rwidth = 0.8,color = "green",edgecolor  = "black")
plt.show()

# violin plot 

import matplotlib.pyplot as plt
data = [23,43,78,98,67,89,66,55,89,43,33,45,65]
plt.violinplot(data,showmedians = True)
plt.show()

import matplotlib.pyplot as plt 
import pandas as pd 
data = pd.read_excel(r"C:\Users\Asif computer\Downloads\ESD.xlsx")
data
plt.violinplot(data["Age"],showmeans = True)
plt.title("where most of ages lies ")
plt.show()

import matplotlib.pyplot as plt 
import pandas as pd 
data = pd.read_excel(r"C:\Users\Asif computer\Downloads\ESD.xlsx")
data
plt.violinplot(data["Annual Salary"],showmeans = True)
plt.title("where most of salaries  lies ")
plt.show()

# stemplot in plotting 


import matplotlib.pyplot as plt

data = [238, 423, 324, 464, 342, 677, 534]

# Plot the stem plot with customized marker style, line style, and color
plt.stem(data, linefmt='--', markerfmt='^r',bottom = 0,orientation = "horizontal")

plt.show()


import matplotlib.pyplot as plt 
import pandas as pd 
df = pd.read_excel(r"C:\Users\Asif computer\Downloads\ESD.xlsx")
df 
df2 = df.head(50)
# plt.stem(df2["Age"],markerfmt = "^r",linefmt = "--")
plt.plot(df2["Age"],color = "pink")
plt.grid(True)
plt.savefig(r"D:\all data\excel files\CHARTS_files\pictures\Heart Beat.png",facecolor = "black")
plt.title("Heart beat of Murshid hehe")

import matplotlib.pyplot as plt 
import pandas as pd 
days = ["Monday","Tuesday","wednesday","Thursday","Friday","Saturday","sunday"]
NOP1 = [23,24,54,33,64,34,23]
NOP2 = [73,24,67,33,34,30,13]
NOP3 = [25,84,74,83,54,84,93]
plt.stackplot(days,NOP1,NOP2,NOP3)
plt.show()

import matplotlib.pyplot as plt 
import pandas as pd 
days = ["Monday","Tuesday","wednesday","Thursday","Friday","Saturday","sunday"]
NOP1 = [23,24,54,33,64,34,23]
NOP2 = [73,24,67,33,34,30,13]
# NOP3 = [25,84,74,83,54,84,93]
# plt.stackplot(days,NOP1,NOP2,NOP3)
plt.step(days,NOP1,NOP2,marker = "*",where = "mid")
plt.xticks(rotation = 90)
plt.show()
# plt.xticks(rotation = 90)

import matplotlib.pyplot as plt 
import pandas as pd 
df = pd.read_excel(r"C:\Users\Asif computer\Downloads\expense3 (1).xlsx")
df
# grouped = df.groupby("Category")["Amount"].agg({"Amount":"sum"})
# plt.step(grouped.index,grouped["Amount"],marker = "*",where = "mid")

import matplotlib.pyplot as plt
import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel(r"C:\Users\Asif computer\Downloads\expense3 (1).xlsx")

# Group by category and sum the amounts
grouped = df.groupby("Category")["Amount"].sum()

# Plot the step plot
plt.plot(grouped.index, grouped.values, marker='*', drawstyle='steps-mid')

# Add labels and title
plt.xlabel('Category')
plt.ylabel('Total Amount')
plt.title('Total Expenses by Category')

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Display the plot
plt.show()


import matplotlib.pyplot as plt
import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel(r"C:\Users\Asif computer\Downloads\expense3 (1).xlsx")

# Convert the "Amount" column to numeric
df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')

# Drop rows with missing or non-numeric values in the "Amount" column
df = df.dropna(subset=['Amount'])

# Group by category and sum the amounts
grouped = df.groupby("Category")["Amount"].sum()

# Plot the step plot
plt.plot(grouped.index, grouped.values, marker='*', drawstyle='steps-mid')

# Add labels and title
plt.xlabel('Category')
plt.ylabel('Total Amount')
plt.title('Total Expenses by Category')

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Display the plot
plt.show()


df.info()

import matplotlib.pyplot as plt 
import pandas as pd 
data  = [23,53,45,76,88,34,23,35,63]
x = [23,34,45,26,78,34,23,95,63]
y = [23,54,45,26,88,54,23,35,83]
y1 = [23,54,55,36,88,44,23,25,93]
plt.plot(x,y,label = "male")
plt.plot(data,y,label = "female")
plt.plot(data,y1,label  = "kids",color = "black")
plt.legend()
plt.show()

import pandas as pd 
import matplotlib.pyplot as plt 
names = ["aqib","javed","razi","hanif","ahsan"]


import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame
data = {
    'Gender': ['Male', 'Female', 'Male', 'Male', 'Female', 'Female'],
    'Age': [25, 30, 35, 40, 45, 50]
}

df = pd.DataFrame(data)

# Group by 'Gender' and calculate average age
average_age_by_gender = df.groupby('Gender')['Age'].min()

# Plot the average age by gender
average_age_by_gender.plot(kind='bar', color=['black', 'pink'])

# Add labels and title
plt.xlabel('Gender')
plt.ylabel('Average Age')
plt.title('Average Age by Gender')

# Show plot
plt.show()


